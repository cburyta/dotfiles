"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" load plugins from vundle
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#begin()

" let vundle manage vundle
Plugin 'gmarik/vundle'

" utilities
Plugin 'kien/ctrlp.vim' " fuzzy find files
Plugin 'scrooloose/nerdtree' " file drawer, open with :NERDTreeToggle
Plugin 'benmills/vimux'
Plugin 'tpope/vim-fugitive' " the ultimate git helper
Plugin 'tpope/vim-commentary' " comment/uncomment lines with gcc or gc in visual mode
Plugin 'christoomey/vim-tmux-navigator' " enable vim + tmux nav via C-hjkl

" statusbar
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'

" colorschemes
Plugin 'chriskempson/base16-vim'

" JavaScript plugins
Plugin 'pangloss/vim-javascript'
Plugin 'jelera/vim-javascript-syntax'

call vundle#end()

""""""""""""""""""""""""""""""""""""""""""""""""""""
" General
""""""""""""""""""""""""""""""""""""""""""""""""""""

" wrap git commit files at the appropriate length
filetype plugin indent on

set nocompatible " not compatible with vi
set autoread " detect when a file is changed

" make backspace behave in a sane manner
set backspace=indent,eol,start

" set a map leader for more key combos
let mapleader = ','

" Tab control
set expandtab           " spaces ftw
set smarttab            " tab respects 'tabstop', 'shiftwidth', and 'softtabstop'
set tabstop=4           " the visible width of tabs
set softtabstop=4       " edit as if the tabs are 4 characters wide
set shiftwidth=4        " number of spaces to use for indent and unindent
set shiftround          " round indent to a multiple of 'shiftwidth'

" enable yank to clipboard and use of mouse
set clipboard=unnamed
set mouse=a

" turn off swap files and backup
set noswapfile
set nobackup
set nowb

" faster redrawing
set ttyfast

" code folding settings
set foldmethod=syntax   " fold based on indent
set foldnestmax=10      " deepest fold is 10 levels
set nofoldenable        " don't fold by default
set foldlevel=1

" Start scrolling when cursor close to edge
set scrolloff=8
set sidescrolloff=15
set sidescroll=1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => User Interface
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Searching
set ignorecase      " case insensitive searching
set smartcase       " case-sensitive if expresson contains a capital letter
set hlsearch
set incsearch       " set incremental search, like modern browsers
set nolazyredraw    " don't redraw while executing macros

set magic           " Set magic on, for regex

set showmatch       " show matching braces
set mat=2           " how many tenths of a second to blink

" switch syntax highlighting on
syntax on

" theming and colors

set encoding=utf8
let base16colorspace=256    " Access colors present in 256 colorspace"
set t_Co=256                " Explicitly tell vim that the terminal supports 256 colors"
set background=dark
colorscheme delek

set number

set autoindent " automatically set indent of new line
set smartindent

set laststatus=2 " show the satus line all the time

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" edit ~/.vimrc
map <leader>ev :e! ~/.vimrc<cr>

" save and close all
map <leader>wc :wincmd q<cr>

" type jj quick to break out of INSERT mode
inoremap jj <Esc>

" allow to move or create split in the given direction
map <leader>h :call WinMove('h')<cr>
map <leader>j :call WinMove('j')<cr>
map <leader>k :call WinMove('k')<cr>
map <leader>l :call WinMove('l')<cr>

" moving up and down work as you would expect
nnoremap <silent> j gj
nnoremap <silent> k gk

" helpers for dealing with other people's code
nmap \t :set ts=4 sts=4 sw=4 noet<cr>
nmap \s :set ts=4 sts=4 sw=4 et<cr>

" Reset highlighted search
nnoremap // :let @/=""<cr>

" yank to blackhole register when pasting over text
vnoremap p "_dP

" fugitive git shortcuts
nmap <leader>gs :Gstatus<cr>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Window movement shortcuts
" move to the window in the direction shown, or create a new window
function! WinMove(key)
    let t:curwin = winnr()
    exec "wincmd ".a:key
    if (t:curwin == winnr())
        if (match(a:key,'[jk]'))
            wincmd v
        else
            wincmd s
        endif
        exec "wincmd ".a:key
    endif
endfunction

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Plugin settings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" open nerdtree initially
autocmd vimenter * NERDTree
" focus cursor on opened file initially
autocmd vimenter * wincmd l

" Make nerdtree look nice
let NERDTreeMinimalUI = 1
let NERDTreeDirArrows = 1
let g:NERDTreeWinSize = 30

" Focus in the main content window
let g:nerdtree_tabs_focus_on_files = 1

" Left toggles NERDTree
nnoremap <Left> :NERDTreeToggle<CR>

" don't close NERDTree after a file is opened
let g:NERDTreeQuitOnOpen = 0

" show hidden files in NERDTree
let NERDTreeShowHidden=1

" expand to the path of the file in the current buffer
nmap <silent> <leader>y :NERDTreeFind<cr>

" map fuzzyfinder (CtrlP) plugin
nmap <silent> <leader>r :CtrlPBuffer<cr>
let g:ctrlp_map='<leader>t'
let g:ctrlp_dotfiles=1
let g:ctrlp_working_path_mode = 'ra'

" CtrlP ignore patterns
let g:ctrlp_custom_ignore = {
            \ 'dir': '\.git$\|node_modules$\|\.hg$\|\.svn$',
            \ 'file': '\.exe$\|\.so$'
            \ }

" search the nearest ancestor that contains .git, .hg, .svn
let g:ctrlp_working_path_mode = 2
